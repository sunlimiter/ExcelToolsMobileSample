package com.tywho.exceltoolsmobile.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tywho.exceltoolsmobile.bean.QuestionContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "q_content".
*/
public class QuestionContentDao extends AbstractDao<QuestionContent, Long> {

    public static final String TABLENAME = "q_content";

    /**
     * Properties of entity QuestionContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Locationx = new Property(2, int.class, "locationx", false, "LOCATIONX");
        public final static Property Locationy = new Property(3, int.class, "locationy", false, "LOCATIONY");
        public final static Property Parentid = new Property(4, int.class, "parentid", false, "PARENTID");
    }


    public QuestionContentDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getLocationx());
        stmt.bindLong(4, entity.getLocationy());
        stmt.bindLong(5, entity.getParentid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getLocationx());
        stmt.bindLong(4, entity.getLocationy());
        stmt.bindLong(5, entity.getParentid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionContent readEntity(Cursor cursor, int offset) {
        QuestionContent entity = new QuestionContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.getInt(offset + 2), // locationx
            cursor.getInt(offset + 3), // locationy
            cursor.getInt(offset + 4) // parentid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocationx(cursor.getInt(offset + 2));
        entity.setLocationy(cursor.getInt(offset + 3));
        entity.setParentid(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
